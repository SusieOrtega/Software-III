?rnorm
require(graphics)
dnorm(0) == 1/sqrt(2*pi)
dnorm(1) == exp(-1/2)/sqrt(2*pi)
dnorm(1) == 1/sqrt(2*pi*exp(1))
## Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
curve(log(pnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("pnorm(x, log=TRUE)", adj = 0)
mtext("log(pnorm(x))", col = "red", adj = 1)
## if you want the so-called 'error function'
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
## (see Abramowitz and Stegun 29.2.29)
## and the so-called 'complementary error function'
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
## and the inverses
erfinv <- function (x) qnorm((1 + x)/2)/sqrt(2)
erfcinv <- function (x) qnorm(x/2, lower = FALSE)/sqrt(2)
help.search("rnorm")
args("rnorm")
View(erf)
a<-available.packages()
head(rownames(a),3)
n<-signif(nrow(a),2)
n
install.packages(ggplot2)
install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("devtools")
a <- installed.packages()
view(a)
install.packages("rmarkdown")
install.packages("ggplot2")
install.packages("devtools")
a <- installed.packages()
view(a)
View(a)
x <- 1
x <- 1
x <- 2
print(x)
print(X) #Al poner mayuscula, que no ha sido definida, me marcará error
#Aquí se está haciendo la asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo hacer una asignación explicita
print(x)
print(X)
#Al poner mayuscula, que no ha sido definida, me marcará error
#La alternativa es solicitar una impresión explicita
x
#Aquí se está haciendo la asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo hacer una asignación explicita
print(x)
print(X)
#Al poner mayuscula, que no ha sido definida, me marcará error
#La alternativa es solicitar una impresión explicita
x
#La asignación tambien puede hacerse de textos
msg <- "Hola"
#Aquí se está haciendo la asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo hacer una asignación explicita
print(x)
print(X)
#Al poner mayuscula, que no ha sido definida, me marcará error
#La alternativa es solicitar una impresión explicita
x
#La asignación tambien puede hacerse de textos
msg <- "Hola"
#Al solicitar una impresión, me deberá enseñar el mensaje que está guardado
print(msg)
#Aquí se está haciendo la asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo hacer una asignación explicita
print(x)
print(X)
#Al poner mayuscula, que no ha sido definida, me marcará error
#La alternativa es solicitar una impresión explicita
x
#La asignación tambien puede hacerse de textos
msg <- "Hola"
#Al solicitar una impresión, me deberá enseñar el mensaje que está guardado
print(msg)
x <- #Expresión incompleta
#Aquí se está haciendo la asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo hacer una asignación explicita
print(x)
print(X)
#Al poner mayuscula, que no ha sido definida, me marcará error
#La alternativa es solicitar una impresión explicita
x
#La asignación tambien puede hacerse de textos
msg <- "Hola"
#Al solicitar una impresión, me deberá enseñar el mensaje que está guardado
print(msg)
x <- #Expresión incompleta
3
#Aquí se está haciendo la asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo hacer una asignación explicita
print(x)
print(X)
#Al poner mayuscula, que no ha sido definida, me marcará error
#La alternativa es solicitar una impresión explicita
x
#La asignación tambien puede hacerse de textos
msg <- "Hola"
#Al solicitar una impresión, me deberá enseñar el mensaje que está guardado
print(msg)
x <- #Expresión incompleta
3
#Aquí se está haciendo la asignación
x <- 1
x <- 2
#La asignación no me permitió visualizar el resultado, para ello debo hacer una asignación explicita
print(x)
print(X)
#Al poner mayuscula, que no ha sido definida, me marcará error
#La alternativa es solicitar una impresión explicita
x
#La asignación tambien puede hacerse de textos
msg <- "Hola"
#Al solicitar una impresión, me deberá enseñar el mensaje que está guardado
print(msg)
x <- #Expresión incompleta
x <- #Expresión incompleta, para salir de ella dejar de ejecutarla
3
x <- #Expresión incompleta, para salir de ella dejar de ejecutarla
x
x <- 1:20
x
y <- 3:9
y
z <- 99:43
z
w <- 3:14.5
w
x
z
w <- 3:14.5
w
# En el caso de trabajar con decimales, me genera secuencias hasta los enteros.
x
z
# En el caso de trabajar con decimales, me genera secuencias hasta los enteros.
x <- 1
# En el caso de trabajar con decimales, me genera secuencias hasta los enteros.
x <- 1l
# En el caso de trabajar con decimales, me genera secuencias hasta los enteros.
x <- 1L
Inf
exp(-Inf)
Inf - Inf
Inf + Inf
#Cada objeto tiene sus propiedades o atributos los cuales se pueden accesar a partir d ela función
attributes(z)
#Cada objeto tiene sus propiedades o atributos los cuales se pueden accesar a partir d ela función
#Es posible crear un vector con la función c()
x <- c(TRUE,FALSE,TRUE,TRUE,F, F , T)
x
#Cada objeto tiene sus propiedades o atributos los cuales se pueden accesar a partir d ela función
#Es posible crear un vector con la función c()
x <- c(TRUE,FALSE,TRUE,TRUE,F, F , T) #Logical
x <- c(1L, 3L, 5L, -4L) #Integer
x <- c(1, 3 , 5, -4)
x <- c(1+1*i, 3+4*i, -5-6*i, 3.14 -1.618*i) #Complex
x <- c(1+1i, 3+4i, -5-6i, 3.14 -1.618i) #Complex
x <- c("a", "b", "c", "Hola", "Mundo") #Character
#Otro posible camino sería con la función Vector
x <- vector("numeric", length = 10)
x
y <- c(1.7, "a")
y <- c(TRUE, 2)
y <- c(TRUE, 2L)
y <- c(FALSE, 2L, 5, 5 +4i)
y
x print()
x
x
# Listas
x <- list(1, "a", TRUE, 3+2i, 5L)
x
1:50
# Listas
x <- list(1, "a", TRUE, 3+2i, 5L, 1:50)
x
m?
#Matrices
m <- matrix(nrow=2, ncol = 3)
m
dim(m)
attributes(m)
#Como llenar una matriz
m <- matrix(data = 1:6, nrow =  2, ncol = 3)
m <- matrix(1:6,2,3)
m
m <- matrix(NA, 2, 3)
# Listas
m
#La manera automatica de llenarse fue col por col
#si yo quisiera que se llenara fila por fila seria:
m <-matrix(data = 1:6, nrow =  2, ncol = 3, byrow = TRUE)
m
m
m
#Una manera alternativa de crear una matriz es desde un vector y ...
m <- 1:10
dim(m)
dim(m) <- c(2,5)
m
#Otra forma de creae una matriz es uniendos dos distintos vectores
x <- 1:3
y <- 10:12
#CBind, unir columnas
cbind(x,y)
rbind(x,y)
#Factores
x <- factor(c("Si", "Si", "No", "No", "Si"))
x
x <- factor(c("Azul", "Verde", "Verde","Azul"))
x <- factor(c("Azul", "Verde", "Verde","Azul","Rojo"))
x
table(x)
unclass(x)
¿factor
?factor
x <- factor(c("azul", "verde", "verde", "azul", "rojo", ), levels = c("rojo","amarillo","verde", "naranja"))
x <- factor(c("azul", "verde", "verde", "azul", "rojo"), levels = c("rojo","amarillo","verde", "naranja"))
x
unclass(x)
x <- factor(c("azul", "verde", "verde", "azul", "rojo"), levels = c("rojo","amarillo","verde", "naranja", "azul"))
x
unclass(x)
#Factores con orden definido
x <- factor(c("azul", "verde", "verde", "azul", "rojo"), levels = c("rojo","amarillo","verde", "azul"))
x
unclass(x)
#Valores Faltantes
x <- c(1, 2 , NA, 10, 3)
is.na(x)
is.nan(x)
#Valores Faltantes
x <- c(1, 2 , NA, 10, 3)
is.na(x)       #Valor faltante detectado
is.nan(x)      # Valor no numerico que no es faltante
#No todo valor faltante es NAN
y <- c(1, 2 , NaN, 10, 3)
is.na(y)       #Valor faltante detectado
is.nan(y)      # Valor no numerico que no es faltante
#No todo valor faltante es NAN
#DataFrame
x <- data.frame(foo= 1:4, bar= c(T,T,F,F))
X
#DataFrame
x <- data.frame(foo= 1:4, bar= C(T,T,F,F))
#DataFrame
x <- data.frame(foo= 1:4, bar= c(T,T,F,F))
x
# Errores en la coerción forzada
x <- c("a", "b", "c")
?read.table
?sapply
?sapply(list, function)
?sapply(list, function)
#Lectura y escritura de datos
#dput y dget
y <- data.frame(a=1, b="a")
dput(y)
Datos <- data.frame(mtcars)
Datos
dput(Datos)
dput(Datos, file= "~/Documents/GitHub/Software-III/Carros.R")
CarrosSusana <- dget(file= "~/Documents/GitHub/Software-III/Carros.R")
CarrosSusana
CarrosSusana
Datos <- data.frame(mtcars)
Datos
dput(Datos)
dput(Datos, file= "~/GitHub/Software-III/Carros.R")
CarrosSusana <- dget(file= "~/GitHub/Software-III/Carros.R")
CarrosSusana
setwd("~/GitHub/Software Actuarial-III")
#Extracción de valores faltantes
airquality[1:6, ]
setwd("~/GitHub/Software-III")
#Extracción de valores faltantes
airquality[1:6, ]
setwd("~/GitHub/Software-III")
#Extracción de valores faltantes
airquality[1:6, ]
#Extracción de valores faltantes
complete.cases(airquality[1:6, ])
#Extracción de valores faltantes
completos <- complete.cases(airquality[1:6, ])
completos
airquality[completos, ]
setwd("~/GitHub/Software-III")
#Extracción de valores faltantes
completos <- complete.cases(airquality)
completos
airquality[completos, ]
data[1:6,]
setwd("~/GitHub/Software-III")
#Extracción de valores faltantes
airquality[1:6, ]
completos <- complete.cases(airquality)
data <- airquality[completos, ]
data[1:6,]
#Al hacer
#Algunas operaciones
x <- 1:4; y <- 6:9
x+y
x>2
x>=2
y==8
x*y
x/y
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x*y
x/y
x%*%y
x;y;x%*%y
y%*%x
x=5
if(x>=5)
{"El número es mayor que 5."}
else
{"El número es menor que 5."}
#Sintaxis
if(condición)
{#algunas instrucciones
}
else
{##Algunas otras instrucciones
}
x=5
if(x>=5)
{"El número es mayor que 5."
}
else
{"El número es menor que 5."
}
x=5
if(x>=5)
{
"El número es mayor que 5."
}else
{"El número es menor que 5."
}
x=5
if(x>=5)
{
"El número es mayor que 5."
}else
{"El número es menor que 5."
}
#IRONMAN
x=7
if (x<=5){
print("Menor a 5")
}else if (x<=10){
print("entre 5 y 10")
}else{
print("Mayor a 10")
}
if(x>3){
y <- 10
}else{
y <- 0
}
y <- if (x>3){
10
}else{
0
}
if(x>3){
y <- 10
}else{
y <- 0
}
y
y <- if (x>3){
10
}else{
0
}
y
